shell.executable("/bin/bash")
shell.prefix("source ~/.bash_profile; ")
REF = "/home/doanea/ARchipSeq/data/hg19/genome"
BOWTIE2_INDEXES="/home/doanea/Projects/ARchipSeq/data/hg19/"

#sample names and classes
#SAMPLES = "t3 t2".split()
#SAMPLES = "SRR776488 SRR776489 SRR776490 SRR776491 SRR776492 SRR776493".split()
#SAMPLES = "AR0 AR1".split() # AR2 FOXA1_0 FOXA1_1 input0 input1".split()
#SAMPLES = "AR0test C1".split()
SAMPLES = "AR0 AR1 AR2 FOXA1_1 FOXA1_0 input0 input1".split()
CONTROL = ["C1"]
MAP_IM_OUT="map-intermediate-out"
CLASS_AR = SAMPLES[:2]
CLASS_FX = SAMPLES[3:4]
CLASS_INPUT = SAMPLES[5:6]
CLASS_CHP = SAMPLES[0:5]

CLASS_CHP_TAG = expand('~/Projects/ARchipSeq/data/mapped2/{sample}.tagAlign.gz', sample=CLASS_CHP)
CLASS_INPUT_TAG = expand('data/mapped2/{sample}.tagAlign.gz', sample=CLASS_INPUT)
# # path to bam files
# rule all:
#     input: expand("{sample}.regionPeak", sample=SAMPLES)


rule all:
    #input: expand("data/IDR/{sample}.peaks.narrowPeak", sample=CLASS_CHP)
    input: expand("data/IDR/{sample}.peaks.filter.narrowPeak", sample=CLASS_CHP)
    #input: expand("data/mapped2/{sample}.tagAlign.gz_V_control_peaks.narrowPeak", sample=CLASS_CHP)
    #input: expand("data/mapped2/{sample}.tagAlign.gz", sample=CLASS_CHP)

rule cpp:
    input: "data/mapped2/{CLASS_CHP}.tagAlign.gz_V_control_peaks.narrowPeak"
    output: "data/IDR/{CLASS_CHP}.peaks.filter.narrowPeak"
    shell:
        """sort -k 8nr,8nr {input} | head -n 100000 > {output}
        """

# rule filter_macs2:
#     input: "data/macs2/{sample}.tagAlign.gz_V_control_peaks.narrowPeak"
#     output: "data/IDR/{sample}.macs2.filt.peaks.narrowPeak.gz"
#     shell:
#         """
#         sort -k 8nr,8nr data/macs2/{sample}.tagAlign.gz_V_control_peaks.narrowPeak | head -n 100000 | gzip -c > {ouput}
#         """

# rule macs2:
#     input: chp='data/mapped2/{sample}.tagAlign.gz', ct='data/mapped2/input_all.tagAlign.gz'
#     output: "{sample}_V_control_peaks.narrowPeak"
#     shell:
#         """
#         macs2 callpeak -t {input.chp} -c {input.ct} -f BED -n {sample}_V_control -g hs -p 1e-2 --to-large
#         """
# rule macs2:
#     input: chp='data/mapped2/{sample}.tagAlign.gz'
#     output: "data/mapped2/{sample}_V_control_peaks.narrowPeak"
#     shell:
#         """
#         macs2 callpeak -t {input.chp} -c data/mapped2/input_all.tagAlign.gz -f BED -n {sample}_V_control -g hs -p 1e-2 --to-large --outdir /home/doanea/ARchipSeq/data/mapped2
#
#         """
#    input: chp='data/mapped2/{sample}.tagAlign.gz', ct='data/mapped2/input_all.tagAlign.gz'

# rule macs2:
#     #input: chp= CLASS_CHP, ct='data/mapped2/input_all.tagAlign.gz'
#     input: chp=CLASS_CHP_TAG, ct='data/mapped2/input_all.tagAlign.gz'
#     params: chip_sam=CLASS_CHP
#     output: "{params.chip_sam}.tagAlign.gz_V_control_peaks.narrowPeak"
#     shell:
#         """
#         macs2 callpeak -t '{input.chp}.tagAlign.gz -c {input.ct} -f BED -n {params.chip_sam}_V_control -g hs -p 1e-2 --to-large --outdir data/mapped2/
#         """

rule macs2:
    input: chp='data/mapped2/{sample}.tagAlign.gz', ct='data/mapped2/input_all.tagAlign.gz'
    output: "data/mapped2/{sample}.tagAlign.gz_V_control_peaks.narrowPeak"
    params: names='{sample}.tagAlign.gz'
    shell:
        """
        macs2 callpeak -t {input.chp} -c {input.ct} -f BED -n {params.names}_V_control -g hs -p 1e-2 --to-large --outdir data/mapped2 #need to put od
        """

rule pool_control:
    input: class_cont=CLASS_INPUT_TAG
    output: 'data/mapped2/input_all.tagAlign.gz'
    params: class_cont=','.join(CLASS_INPUT_TAG)
    shell:
        """
        zcat {params.class_cont} | gzip -c > {output}
        """

rule filt_bam:
    input: 'data/mapped2/{sample}.bam'
    output: tagAlign='data/mapped2/{sample}.tagAlign.gz'
    shell:
        """
        bin/filtBam.sh {input} > {output.tagAlign}
        """

rule bam_sort:
    input:
        "data/mapped2/{sample}.bam"
    output:
        "data/mapped2/{sample}.sorted.bam"
    params: srt="data/mapped2/{sample}.sorted"
    shell:
        """
        samtools sort -@ 8 {input} {params.srt}
        """

rule samtobam:
    input: "data/mapped2/{sample}.sam"
    output: "data/mapped2/{sample}.bam"
    threads: 10
    log: "data/mapped2/{sample}.bam.sm.log"
    shell: """
    samtools view -@ 10 -bS -F 1548 -q 30 {input} > {output}
    """

rule make_sam:
    input: "data/fastq/{sample}.fastq.sai"
    params: fq="data/fastq/{sample}.fastq"
    output: "data/mapped2/{sample}.sam"
    threads: 10
    shell: "bwa samse /home/leslielab/indexes/bwa/hg19/genome.fa {input} {params.fq} > {output}"

# rule bwa:
#     input: "data/fastq/{sample}.fastq"
#     #input: "data/fastq/{samples}.fastq"
#     output: "{sample}.sai"
#     threads: 10
#     shell: "bwa aln -t 4 /home/leslielab/indexes/bwa/hg19/genome.fa {input} > {output}"
#     #"bowtie2 -q -p 10 -x /home/doanea/Projects/ARchipSeq/data/hg19/genome {input} | samtools view -bS - > {output}"
#     #shell: "${BT2_HOME}bowtie2 -p 20 -x genome -U {input} -S {output}"
#

    #bwa aln -t 4 /home/leslielab/indexes/bwa/hg19/genome.fa s_3_sequence.txt.gz >  s_3_sequence.txt.bwa

rule aln:
    input: 'data/fastq/{sample}.fastq' #refbwt="/home/leslielab/indexes/bwa/hg19/genome.fa.bwt", ref="/home/leslielab/indexes/bwa/hg19/genome.fa"
    params: ref="/home/leslielab/indexes/bwa/hg19/genome.fa"
    threads: 10
    output: sai='data/fastq/{sample}.fastq.sai'
    log: MAP_IM_OUT + "{sample}}.fastq.sai.sm.log"
    shell: """
	bwa aln -t {threads} {params.ref} {input}  > {output.sai}
    """

##run with:
#snakemake -j 30 --cores 30 --directory /home/doanea/Projects/ARchipSeq/ --snakefile /home/doanea/Projects/ARchipSeq/Snakefile_tag
